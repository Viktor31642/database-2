const ClubCard = require("../models/ClubCard");
const Purchase = require("../models/Purchase");

/* ==================== –ö–ê–†–¢–ö–ò ==================== */

exports.getAllCards = async (req, res) => {
  try {
    const cards = await ClubCard.findAll();
    res.json(cards);
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è:", err);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

exports.getCardById = async (req, res) => {
  try {
    const { id } = req.params;
    const card = await ClubCard.findByPk(id);
    if (!card) return res.status(404).json({ error: "–ö–∞—Ä—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    res.json(card);
  } catch (err) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

exports.createCard = async (req, res) => {
  try {
    const { type, title, price, benefits } = req.body;
    const newCard = await ClubCard.create({ type, title, price, benefits });
    res.status(201).json({ message: "‚úÖ –ö–∞—Ä—Ç–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ", newCard });
  } catch (err) {
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É" });
  }
};

exports.updateCard = async (req, res) => {
  try {
    const { id } = req.params;
    const card = await ClubCard.findByPk(id);
    if (!card) return res.status(404).json({ error: "–ö–∞—Ä—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    await card.update(req.body);
    res.json({ message: "‚úÖ –ö–∞—Ä—Ç–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ", card });
  } catch (err) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è" });
  }
};

exports.deleteCard = async (req, res) => {
  try {
    const { id } = req.params;
    const card = await ClubCard.findByPk(id);
    if (!card) return res.status(404).json({ error: "–ö–∞—Ä—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    await card.destroy();
    res.json({ message: "üóëÔ∏è –ö–∞—Ä—Ç–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ" });
  } catch (err) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è" });
  }
};

/* ==================== –ü–û–ö–£–ü–ö–ò ==================== */

// ‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É
exports.addPurchase = async (req, res) => {
  try {
    const { card_id, firstName, lastName, phone, asGift } = req.body;
    const card = await ClubCard.findByPk(card_id);
    if (!card) return res.status(404).json({ error: "–ö–∞—Ä—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

    const purchase = await Purchase.create({ card_id, firstName, lastName, phone, asGift });
    res.status(201).json({ message: "‚úÖ –ü–æ–∫—É–ø–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ", purchase });
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—É–ø–∫–∏:", err);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É" });
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–æ–∫—É–ø–∫–∏
exports.getAllPurchases = async (req, res) => {
  try {
    const purchases = await Purchase.findAll({ include: ClubCard });
    res.json(purchases);
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∫—É–ø–æ–∫:", err);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∫—É–ø–∫–∏" });
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∫—É–ø–∫—É –∑–∞ ID
exports.getPurchaseById = async (req, res) => {
  try {
    const { id } = req.params;
    const purchase = await Purchase.findByPk(id, { include: ClubCard });
    if (!purchase) return res.status(404).json({ error: "–ü–æ–∫—É–ø–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    res.json(purchase);
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏:", err);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∫—É–ø–∫—É" });
  }
};

// ‚úÖ –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É
exports.deletePurchase = async (req, res) => {
  try {
    const { id } = req.params;
    const purchase = await Purchase.findByPk(id);
    if (!purchase) return res.status(404).json({ error: "–ü–æ–∫—É–ø–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

    await purchase.destroy();
    res.json({ message: "üóëÔ∏è –ü–æ–∫—É–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ" });
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏:", err);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É" });
  }
};
// ‚úÖ –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É
exports.updatePurchase = async (req, res) => {
  try {
    const { id } = req.params;
    const { firstName, lastName, phone, asGift } = req.body;

    const purchase = await Purchase.findByPk(id);
    if (!purchase) {
      return res.status(404).json({ error: "–ü–æ–∫—É–ø–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    await purchase.update({ firstName, lastName, phone, asGift });
    res.json({ message: "‚úÖ –ü–æ–∫—É–ø–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ", purchase });
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏:", err);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É" });
  }
};